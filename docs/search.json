[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Dream of the Red Chamber Data visualizations",
    "section": "",
    "text": "It’s a data visualization of the three main protagonists of 红楼梦 (Dream of the Red Chamber), a classic of Chinese literature. It represents their mentions along the 120 chapters of the novel.\nThis page is the result of some experimentations I made to try Python in a Quarto environment with jupyter."
  },
  {
    "objectID": "index.html#introduction",
    "href": "index.html#introduction",
    "title": "Dream of the Red Chamber Data visualizations",
    "section": "",
    "text": "It’s a data visualization of the three main protagonists of 红楼梦 (Dream of the Red Chamber), a classic of Chinese literature. It represents their mentions along the 120 chapters of the novel.\nThis page is the result of some experimentations I made to try Python in a Quarto environment with jupyter."
  },
  {
    "objectID": "index.html#importing-data",
    "href": "index.html#importing-data",
    "title": "Dream of the Red Chamber Data visualizations",
    "section": "Importing data",
    "text": "Importing data\nImporting fulltext.txt, a text file retrieved from Project Gutenberg. It is written with traditionnal chinese characters. The header with metadata and the end notes with legal information were removed. Some minor typos were corrected to allow a good splitting.\n\n\nCode\n# The echo: false option disables the printing of code (only output is displayed).\n\nwith open(\"data/fulltext.txt\", \"r\", encoding=\"utf-8\") as file:\n    main_text = file.read()\n\n\nPutting the content into a panda dataframe and shampooing the data :\n\n\nCode\nimport pandas as pd\nimport re\n\n# Step 1: Split by chapters\n# Extract between 第 and 回 when a line starts with 第 and 回 is not more far than 4 positions\n\nchapters = re.split(r'(?=^第.{0,4}回\\s*)', main_text, flags=re.MULTILINE)\ndata = []\n\nfor chapter in chapters[1:]:\n    # Split into title (up to first line break) and content (the rest)\n    lines = chapter.strip().split('\\n', 1)\n    title = lines[0].strip()\n    content = lines[1].strip() if len(lines) &gt; 1 else ''\n    data.append([title, content])\n\n\n# Create DataFrame\ndf_cn = pd.DataFrame(data, columns=['Chapter', 'RawContent'])\n\n\n\n# Step 2 : Doing some cleaning \n\n# Remove line breaks in the RawContent\ndf_cn['RawContent'] = df_cn['RawContent'].str.replace(r'[\\r\\n]+', ' ', regex=True)\ndf_cn['RawContent'] = df_cn['RawContent'].str.replace(r'[\\n]+', ' ', regex=True)\n\n# Remove dashes in the RawContent\ndf_cn['RawContent'] = df_cn['RawContent'].str.replace(r'[-]+', ' ', regex=True)\n\n# Replace four space by line break\ndf_cn['RawContent'] = df_cn['RawContent'].str.replace(r'[　　]+', '\\r\\n', regex=True)\n\n# Add chapter numbers as integers\ndf_cn['Chapter_num'] = range(1, len(df_cn) + 1)"
  },
  {
    "objectID": "index.html#how-many-times-the-3-mains-protogonists-are-mentioned",
    "href": "index.html#how-many-times-the-3-mains-protogonists-are-mentioned",
    "title": "Dream of the Red Chamber Data visualizations",
    "section": "How many times the 3 mains protogonists are mentioned",
    "text": "How many times the 3 mains protogonists are mentioned\n\nCounting\n\n\nCode\n# Count how many times the three main protagonists are counted in RawContent\n# Synonyms are enriched thanks to Wikidata (in labels).\n\n# List of Jia Baoyu's synonyms https://www.wikidata.org/wiki/Q8428650\njia_baoyu_synonyms = [\n    '贾宝玉', '賈寶玉', '寶玉', '寶二爺', '怡紅公子',\n    '絳洞花王', '富貴閒人', '宝玉', '宝二爷', \n    '絳洞花主', '绛洞花主', '怡红公子', '绛洞花王'\n]\n\n# Join them into a regex pattern\njia_baoyu_pattern = '|'.join(jia_baoyu_synonyms)\n\n# Use in your count\ndf_cn['count_JiaBaoyu'] = df_cn['RawContent'].str.count(jia_baoyu_pattern)\n\n\n\n\n# List of Lin Daiyu's synonyms\nlin_daiyu_synonyms = [\n    '林黛玉', '黛玉', '瀟湘妃子', '顰兒', '颦儿',\n    '林姑娘', '林妹妹', '潇湘妃子', \"玉儿\", \"颦颦\",\n]\n\n# Join them into a regex pattern\nlin_daiyu_pattern = '|'.join(lin_daiyu_synonyms)\n\n# Use in your count\ndf_cn['count_LinDaiyu'] = df_cn['RawContent'].str.count(lin_daiyu_pattern)\n\n\n\n\n# List of Xue Baochai's synonyms\nxue_baochai_synonyms = [\n    '薛寶釵', '薛宝钗', '寶釵', '宝钗',\n    '蘅蕪君', '蘅芜君', '寶姑娘', '宝姑娘',\n    '寶丫頭', '宝丫头', '寶姐姐', '宝姐姐'\n]\n\n# Join them into a regex pattern\nxue_baochai_pattern = '|'.join(xue_baochai_synonyms)\n\n# Use in your count\ndf_cn['count_XueBaochai'] = df_cn['RawContent'].str.count(xue_baochai_pattern)\n\n\n\n\nDrawing a heatmap\nPlotting a heatmap for all the chapters with a different color intensity depending on how many times one of the three main protagonists are mentioned.\n\n\nCode\n#Note that we included the cell option fold: true to hide the code by default (click the Code button to show it).\n\n# pip install scikit-learn jieba seaborn matplotlib\n\n# Draw a heat map for each entry and the values of the columns \n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Set Chapter_num as index for labeling rows in the heatmap\nheatmap_data = df_cn.set_index('Chapter_num')[['count_JiaBaoyu', 'count_LinDaiyu', 'count_XueBaochai']]\n\n\n# Create the heatmap\n\n# Plot the heatmap without labels or annotations\nplt.figure(figsize=(10, 6))\nsns.heatmap(\n    heatmap_data,\n    annot=False,          # No numbers inside cells\n    cmap='RdPu',          # palette of colors\n    linewidths=0.5,\n    cbar=True,\n    xticklabels=True,    #  column names\n    yticklabels=False     # No row labels\n)\n\n# Set y-ticks at intervals of 25\nnum_rows = heatmap_data.shape[0]\nticks = np.arange(0, num_rows, 25)\nplt.yticks(ticks + 0.5, ticks + 1)  # +0.5 centers ticks in cells, +1 shifts to 1-based indexing\n\nplt.title('«Dream of the Red Chamber» Three Main Protagonists \\n(Number of Mentions per Chapter)')\nplt.ylabel('Chapter Number')\nplt.xlabel('')  # Remove the x-axis label\nplt.tight_layout()\nplt.savefig('images/characters_count_hlm.png', dpi=300, bbox_inches='tight')\nplt.show()\n\n\n\n\n\n\n\n\nFigure 1: Three Main Protagonists\n\n\n\n\n\n\n\nDrawing a stacked bars graph\n\n\nCode\n# Set up data\nchapter_nums = df_cn['Chapter_num']\ncounts_baoyu = df_cn['count_JiaBaoyu']\ncounts_daiyu = df_cn['count_LinDaiyu']\ncounts_baochai = df_cn['count_XueBaochai']\n\n# Set figure size\nplt.figure(figsize=(12, 6))\n\n# Plot stacked bars\nplt.bar(chapter_nums, counts_baoyu, label='Jia Baoyu', color='mediumvioletred')\nplt.bar(chapter_nums, counts_daiyu, bottom=counts_baoyu, label='Lin Daiyu', color='orchid')\nplt.bar(\n    chapter_nums,\n    counts_baochai,\n    bottom=counts_baoyu + counts_daiyu,\n    label='Xue Baochai',\n    color='plum'\n)\n\n# Labels and legend\nplt.title('«Dream of the Red Chamber» Three Main Protagonists\\n(Number of Mentions per Chapter)')\nplt.xlabel('Chapter Number')\nplt.ylabel('Number of Mentions')\nplt.legend()\nplt.tight_layout()\n\n# Save and show\nplt.savefig('images/characters_count_stackedbars.png', dpi=300, bbox_inches='tight')\nplt.show()\n\n\n\n\n\n\n\n\nFigure 2: Three Main Protagonists\n\n\n\n\n\n\n\nAnother one (not stacked)\n\n\nCode\n# Set up data\nchapter_nums = df_cn['Chapter_num']\ncounts_baoyu = df_cn['count_JiaBaoyu']\ncounts_daiyu = df_cn['count_LinDaiyu']\ncounts_baochai = df_cn['count_XueBaochai']\n\n# Set figure and axes\nfig, axs = plt.subplots(3, 1, figsize=(12, 10), sharex=True)\n\n# Jia Baoyu\naxs[0].bar(chapter_nums, counts_baoyu, color='mediumvioletred')\naxs[0].set_title('Jia Baoyu – Number of Mentions per Chapter')\naxs[0].set_ylabel('Mentions')\n\n# Lin Daiyu\naxs[1].bar(chapter_nums, counts_daiyu, color='orchid')\naxs[1].set_title('Lin Daiyu – Number of Mentions per Chapter')\naxs[1].set_ylabel('Mentions')\n\n# Xue Baochai\naxs[2].bar(chapter_nums, counts_baochai, color='plum')\naxs[2].set_title('Xue Baochai – Number of Mentions per Chapter')\naxs[2].set_ylabel('Mentions')\naxs[2].set_xlabel('Chapter Number')\n\n# Tweak layout\nplt.suptitle('«Dream of the Red Chamber» – Character Mentions per Chapter', fontsize=16, y=1.02)\nplt.tight_layout()\nplt.savefig('images/characters_count_separate_bars.png', dpi=300, bbox_inches='tight')\nplt.show()\n\n\n\n\n\n\n\n\nFigure 3: Three Main Protagonists"
  },
  {
    "objectID": "index.html#how-many-times-pairs-of-two-protagonists-are-mentioned-together",
    "href": "index.html#how-many-times-pairs-of-two-protagonists-are-mentioned-together",
    "title": "Dream of the Red Chamber Data visualizations",
    "section": "How many times pairs of two protagonists are mentioned together",
    "text": "How many times pairs of two protagonists are mentioned together\n\nCounting and drawing\nThreshold (maximum distance between names mentioned) = 20 words.\n\n\nCode\n# Count how many times there is a jia_baoyu_synonyms AND a lin_daiyu_synonyms within 20/threshold characters.\n\nthreshold = 20\n\n# Compile regex patterns (non-capturing groups for clarity)\njia_baoyu_pattern = r'(?:' + '|'.join(jia_baoyu_synonyms) + r')'\nlin_daiyu_pattern = r'(?:' + '|'.join(lin_daiyu_synonyms) + r')'\n\n# Pattern: 贾宝玉 followed by ≤20/threshold chars then 林黛玉, OR 林黛玉 followed by ≤20/threshold chars then 贾宝玉\njia_lin_pattern = rf'{jia_baoyu_pattern}.{{0,{threshold}}}{lin_daiyu_pattern}|{lin_daiyu_pattern}.{{0,{threshold}}}{jia_baoyu_pattern}'\n\n# Function to count matches in a string\ndef count_jia_lin_pairs(text):\n    return len(re.findall(jia_lin_pattern, text))\n\n# Apply to the DataFrame\ndf_cn['JiaBaoyu_LinDaiyu'] = df_cn['RawContent'].apply(count_jia_lin_pairs)\n\n\n\n# count pairs of jia et xue\n\nxue_baochai_pattern = r'(?:' + '|'.join(xue_baochai_synonyms) + r')'\n\n# Pattern: 贾宝玉 followed by ≤20/threshold chars then 林黛玉, OR 林黛玉 followed by ≤20/threshold chars then 贾宝玉\njia_xue_pattern = rf'{jia_baoyu_pattern}.{{0,{threshold}}}{xue_baochai_pattern}|{xue_baochai_pattern}.{{0,{threshold}}}{jia_baoyu_pattern}'\n\n# Function to count matches in a string\ndef count_jia_xue_pairs(text):\n    return len(re.findall(jia_xue_pattern, text))\n\n# Apply to the DataFrame\ndf_cn['JiaBaoyu_XueBaochai'] = df_cn['RawContent'].apply(count_jia_xue_pairs)\n\n\n\n# count pairs of lin et xue\n\nlin_xue_pattern = rf'{lin_daiyu_pattern}.{{0,{threshold}}}{xue_baochai_pattern}|{xue_baochai_pattern}.{{0,{threshold}}}{lin_daiyu_pattern}'\n\n# Function to count matches in a string\ndef count_lin_xue_pairs(text):\n    return len(re.findall(lin_xue_pattern, text))\n\n# Apply to the DataFrame\ndf_cn['LinDaiyu_XueBaochai'] = df_cn['RawContent'].apply(count_lin_xue_pairs)\n\n\n\n\n\n\n\n\n# Set Chapter_num as index for labeling rows in the heatmap\nheatmap_data = df_cn.set_index('Chapter_num')[['JiaBaoyu_LinDaiyu', 'JiaBaoyu_XueBaochai','LinDaiyu_XueBaochai']]\n\n# # Create the heatmap\n\n# Plot the heatmap without labels or annotations\nplt.figure(figsize=(10, 6))\nsns.heatmap(\n    heatmap_data,\n    annot=False,          # No numbers inside cells\n    cmap='RdPu',\n    linewidths=0.5,\n    cbar=True,\n    xticklabels=True,    #  column names\n    yticklabels=False     # No row labels\n)\n\n# Set y-ticks at intervals of 25\nnum_rows = heatmap_data.shape[0]\nticks = np.arange(0, num_rows, 25)\nplt.yticks(ticks + 0.5, ticks + 1)  # +0.5 centers ticks in cells, +1 shifts to 1-based indexing\n\nplt.title('«Dream of the Red Chamber» Pairs of Protagonists \\n Mentioned Together (per Chapter)')\nplt.ylabel('Chapter Number')\nplt.xlabel('')  # Remove the x-axis label\nplt.tight_layout()\nplt.savefig('images/pairs_characters_hlm.png', dpi=300, bbox_inches='tight')\nplt.show()\n\n\n\n\n\n\n\n\nFigure 4: Pairs of Two Protagonists"
  },
  {
    "objectID": "index.html#similarity-matrix",
    "href": "index.html#similarity-matrix",
    "title": "Dream of the Red Chamber Data visualizations",
    "section": "Similarity matrix",
    "text": "Similarity matrix\nFrom zhangdaren916, I retrieved (and saved in /data) :\n\n# List of other synonyms  \nyuan_synonyms = [\n    \"贾元春\", \"元春\" , \"娘娘\"\n]\n\ntan_synonyms = [\n     \"贾探春\", \"探春\", \"探丫头\", \"三姑娘\", \"三妹妹\", \"三小姐\", \"敏探春\" ,\"三丫头\"\n]\n\nshi_synonyms = [\n  \"史湘云\", \"湘云\", \"云儿\", \"诗疯子\", \"痴湘云\", \"酣湘云\", \"娥皇\", \"女英\", \"大英\"\n]\n\nmiao_synonyms = [\n  \"妙玉\", \"妒恨菩提\", \"畸人\", \"槛外人\", \"畸零之人\", \"槛外之人\"\n]\n\nying_synonyms = [\n  \"贾迎春\", \"迎春\", \"二丫头\", \"二小姐\", \"二姑娘\", \"二木头\", \"懦小姐\"\n]\n\nxi_synonyms = [\n  \"贾惜春\", \"惜春\", \"四姑娘\", \"四小姐\", \"四丫头\", \"四妹妹\"\n]\n\nfeng_synonyms = [ \n  \"王熙凤\", \"凤姐\", \"凤丫头\", \"二奶奶\", \"凤哥儿\", \"凤姑娘\", \"凤哥\", \"阿凤\", \"凤辣子\", \"凤儿\", \"鬼灵精儿\", \"熙凤\" \n]\n\nqiao_synonyms = [\n  \"贾巧姐\", \"巧姐儿\", \"大姐儿\", \"巧哥儿\", \"妞妞\", \"大妞妞\", \"巧姐\"\n]\n\nzhi_synonyms = [\n  \"李纨\", \"佛爷\", \"大菩萨\", \"李宫裁\"\n]\n\nqin_synonyms = [\n  \"秦可卿\", \"可卿\", \"可儿\", \"兼美\", \"警幻仙姑\"\n]\n\n\nred_dictionnary.txt (to help segmenting words of the corpus) : really useful ? I use the package jieba that seems to do the same thing.\nred_social_net_weight.txt (chapweight = weight per chapitre / duanweight = weight per paragraph) : so so, i need to redo it. The first two columns are good.\nstopwords.txt (a list of stop words to chop off the corpus) : really useful\n\nFrom lileslll, I found a pearl :\n\nuserdict.json : contains 165 characters of the novel and theirs nicknames… awesome ! lets use it now…\n\n\nA similarity matrix (based on a selection of characters)\n… I create a new column in the dataframe that contains only the characters listed in userdict.json and remove everything else.\nProblem : userdic.json is in simplified chinese and the corpus is in traditional chinese. I ask chatGPT to create new synonyms in traditional chinese characters userdict_w_tradchar.json.\n\n\nBuilding prefix dict from the default dictionary ...\nLoading model from cache C:\\Users\\martinop\\AppData\\Local\\Temp\\jieba.cache\nLoading model cost 1.305 seconds.\nPrefix dict has been built successfully.\n\n\n\n\n\n\n\n\nFigure 5: Similarity matrix"
  },
  {
    "objectID": "index.html#who-are-the-most-mentioned-characters",
    "href": "index.html#who-are-the-most-mentioned-characters",
    "title": "Dream of the Red Chamber Data visualizations",
    "section": "Who are the most mentioned characters ?",
    "text": "Who are the most mentioned characters ?\n\n# build a df based on the userdict.json and count how many times each key (and their synonyms) are mentioned in df_cn[\"RawContent\"] column\n\nfrom collections import defaultdict\n\n# Step 1: Create a reverse lookup — map each synonym to its main name\nsynonym_to_main = {}\nfor main, synonyms in user_dict.items():\n    synonym_to_main[main] = main  # main name maps to itself\n    for synonym in synonyms:\n        synonym_to_main[synonym] = main\n\n# Step 2: Initialize counter\ncounts = defaultdict(int)\n\n# Step 3: Count occurrences across df_cn[\"RawContent\"]\nfor text in df_cn[\"RawContent\"]:\n    words = jieba.lcut(text)\n    for word in words:\n        if word in synonym_to_main:\n            main_name = synonym_to_main[word]\n            counts[main_name] += 1\n\n# Step 4: Convert to DataFrame\ndf_counts = pd.DataFrame([\n    {\"MainName\": name, \"Count\": count} for name, count in counts.items()\n])\n\n# Optional: sort by frequency\ndf_counts = df_counts.sort_values(by=\"Count\", ascending=False).reset_index(drop=True)\n\ndf_counts.head()\n\n\n\n\n\n\n\n\nMainName\nCount\n\n\n\n\n0\n贾母\n2498\n\n\n1\n贾宝玉\n1894\n\n\n2\n王熙凤\n1050\n\n\n3\n王夫人\n1007\n\n\n4\n林黛玉\n945\n\n\n\n\n\n\n\n\nDrawing a graph :\n\nimport matplotlib.pyplot as plt\n\n\nimport matplotlib.font_manager as fm\n# Use SimHei font for Chinese support on Windows\nfont_path = \"C:/Windows/Fonts/simhei.ttf\"\nzh_font = fm.FontProperties(fname=font_path)\n\n\n# Select top 20\ntop_20 = df_counts.head(20)\n\n# Plot\nplt.figure(figsize=(12, 8))\n\n# bar management\nbars = plt.barh(top_20[\"MainName\"], top_20[\"Count\"], color=\"skyblue\")\n# Add count values to the right of each bar\nfor bar in bars:\n    width = bar.get_width()\n    plt.text(width + 1, bar.get_y() + bar.get_height() / 2,\n             str(width), va='center', fontsize=10, fontproperties=zh_font)\n\nplt.barh(top_20[\"MainName\"], top_20[\"Count\"], color=\"lightpink\")\nplt.xlabel(\"Count\", fontproperties=zh_font)\nplt.ylabel(\"Name\", fontproperties=zh_font)\nplt.title(\"Top 20 Most Mentioned Names\")\nplt.gca().invert_yaxis()  # So the highest is at the top\nplt.tight_layout()\nplt.yticks(fontproperties=zh_font)\nplt.xticks(fontproperties=zh_font)\nplt.show()\n\nC:\\Users\\martinop\\AppData\\Local\\Temp\\ipykernel_360\\4252832057.py:29: UserWarning: Glyph 36158 (\\N{CJK UNIFIED IDEOGRAPH-8D3E}) missing from font(s) DejaVu Sans.\n  plt.tight_layout()\nC:\\Users\\martinop\\AppData\\Local\\Temp\\ipykernel_360\\4252832057.py:29: UserWarning: Glyph 27597 (\\N{CJK UNIFIED IDEOGRAPH-6BCD}) missing from font(s) DejaVu Sans.\n  plt.tight_layout()\nC:\\Users\\martinop\\AppData\\Local\\Temp\\ipykernel_360\\4252832057.py:29: UserWarning: Glyph 23453 (\\N{CJK UNIFIED IDEOGRAPH-5B9D}) missing from font(s) DejaVu Sans.\n  plt.tight_layout()\nC:\\Users\\martinop\\AppData\\Local\\Temp\\ipykernel_360\\4252832057.py:29: UserWarning: Glyph 29577 (\\N{CJK UNIFIED IDEOGRAPH-7389}) missing from font(s) DejaVu Sans.\n  plt.tight_layout()\nC:\\Users\\martinop\\AppData\\Local\\Temp\\ipykernel_360\\4252832057.py:29: UserWarning: Glyph 29579 (\\N{CJK UNIFIED IDEOGRAPH-738B}) missing from font(s) DejaVu Sans.\n  plt.tight_layout()\nC:\\Users\\martinop\\AppData\\Local\\Temp\\ipykernel_360\\4252832057.py:29: UserWarning: Glyph 29081 (\\N{CJK UNIFIED IDEOGRAPH-7199}) missing from font(s) DejaVu Sans.\n  plt.tight_layout()\nC:\\Users\\martinop\\AppData\\Local\\Temp\\ipykernel_360\\4252832057.py:29: UserWarning: Glyph 20964 (\\N{CJK UNIFIED IDEOGRAPH-51E4}) missing from font(s) DejaVu Sans.\n  plt.tight_layout()\nC:\\Users\\martinop\\AppData\\Local\\Temp\\ipykernel_360\\4252832057.py:29: UserWarning: Glyph 22827 (\\N{CJK UNIFIED IDEOGRAPH-592B}) missing from font(s) DejaVu Sans.\n  plt.tight_layout()\nC:\\Users\\martinop\\AppData\\Local\\Temp\\ipykernel_360\\4252832057.py:29: UserWarning: Glyph 20154 (\\N{CJK UNIFIED IDEOGRAPH-4EBA}) missing from font(s) DejaVu Sans.\n  plt.tight_layout()\nC:\\Users\\martinop\\AppData\\Local\\Temp\\ipykernel_360\\4252832057.py:29: UserWarning: Glyph 26519 (\\N{CJK UNIFIED IDEOGRAPH-6797}) missing from font(s) DejaVu Sans.\n  plt.tight_layout()\nC:\\Users\\martinop\\AppData\\Local\\Temp\\ipykernel_360\\4252832057.py:29: UserWarning: Glyph 40667 (\\N{CJK UNIFIED IDEOGRAPH-9EDB}) missing from font(s) DejaVu Sans.\n  plt.tight_layout()\nC:\\Users\\martinop\\AppData\\Local\\Temp\\ipykernel_360\\4252832057.py:29: UserWarning: Glyph 34203 (\\N{CJK UNIFIED IDEOGRAPH-859B}) missing from font(s) DejaVu Sans.\n  plt.tight_layout()\nC:\\Users\\martinop\\AppData\\Local\\Temp\\ipykernel_360\\4252832057.py:29: UserWarning: Glyph 38039 (\\N{CJK UNIFIED IDEOGRAPH-9497}) missing from font(s) DejaVu Sans.\n  plt.tight_layout()\nC:\\Users\\martinop\\AppData\\Local\\Temp\\ipykernel_360\\4252832057.py:29: UserWarning: Glyph 29711 (\\N{CJK UNIFIED IDEOGRAPH-740F}) missing from font(s) DejaVu Sans.\n  plt.tight_layout()\nC:\\Users\\martinop\\AppData\\Local\\Temp\\ipykernel_360\\4252832057.py:29: UserWarning: Glyph 24179 (\\N{CJK UNIFIED IDEOGRAPH-5E73}) missing from font(s) DejaVu Sans.\n  plt.tight_layout()\nC:\\Users\\martinop\\AppData\\Local\\Temp\\ipykernel_360\\4252832057.py:29: UserWarning: Glyph 20799 (\\N{CJK UNIFIED IDEOGRAPH-513F}) missing from font(s) DejaVu Sans.\n  plt.tight_layout()\nC:\\Users\\martinop\\AppData\\Local\\Temp\\ipykernel_360\\4252832057.py:29: UserWarning: Glyph 25506 (\\N{CJK UNIFIED IDEOGRAPH-63A2}) missing from font(s) DejaVu Sans.\n  plt.tight_layout()\nC:\\Users\\martinop\\AppData\\Local\\Temp\\ipykernel_360\\4252832057.py:29: UserWarning: Glyph 26149 (\\N{CJK UNIFIED IDEOGRAPH-6625}) missing from font(s) DejaVu Sans.\n  plt.tight_layout()\nC:\\Users\\martinop\\AppData\\Local\\Temp\\ipykernel_360\\4252832057.py:29: UserWarning: Glyph 25919 (\\N{CJK UNIFIED IDEOGRAPH-653F}) missing from font(s) DejaVu Sans.\n  plt.tight_layout()\nC:\\Users\\martinop\\AppData\\Local\\Temp\\ipykernel_360\\4252832057.py:29: UserWarning: Glyph 23016 (\\N{CJK UNIFIED IDEOGRAPH-59E8}) missing from font(s) DejaVu Sans.\n  plt.tight_layout()\nC:\\Users\\martinop\\AppData\\Local\\Temp\\ipykernel_360\\4252832057.py:29: UserWarning: Glyph 22920 (\\N{CJK UNIFIED IDEOGRAPH-5988}) missing from font(s) DejaVu Sans.\n  plt.tight_layout()\nC:\\Users\\martinop\\AppData\\Local\\Temp\\ipykernel_360\\4252832057.py:29: UserWarning: Glyph 21490 (\\N{CJK UNIFIED IDEOGRAPH-53F2}) missing from font(s) DejaVu Sans.\n  plt.tight_layout()\nC:\\Users\\martinop\\AppData\\Local\\Temp\\ipykernel_360\\4252832057.py:29: UserWarning: Glyph 28248 (\\N{CJK UNIFIED IDEOGRAPH-6E58}) missing from font(s) DejaVu Sans.\n  plt.tight_layout()\nC:\\Users\\martinop\\AppData\\Local\\Temp\\ipykernel_360\\4252832057.py:29: UserWarning: Glyph 20113 (\\N{CJK UNIFIED IDEOGRAPH-4E91}) missing from font(s) DejaVu Sans.\n  plt.tight_layout()\nC:\\Users\\martinop\\AppData\\Local\\Temp\\ipykernel_360\\4252832057.py:29: UserWarning: Glyph 29645 (\\N{CJK UNIFIED IDEOGRAPH-73CD}) missing from font(s) DejaVu Sans.\n  plt.tight_layout()\nC:\\Users\\martinop\\AppData\\Local\\Temp\\ipykernel_360\\4252832057.py:29: UserWarning: Glyph 26228 (\\N{CJK UNIFIED IDEOGRAPH-6674}) missing from font(s) DejaVu Sans.\n  plt.tight_layout()\nC:\\Users\\martinop\\AppData\\Local\\Temp\\ipykernel_360\\4252832057.py:29: UserWarning: Glyph 38639 (\\N{CJK UNIFIED IDEOGRAPH-96EF}) missing from font(s) DejaVu Sans.\n  plt.tight_layout()\nC:\\Users\\martinop\\AppData\\Local\\Temp\\ipykernel_360\\4252832057.py:29: UserWarning: Glyph 37026 (\\N{CJK UNIFIED IDEOGRAPH-90A2}) missing from font(s) DejaVu Sans.\n  plt.tight_layout()\nC:\\Users\\martinop\\AppData\\Local\\Temp\\ipykernel_360\\4252832057.py:29: UserWarning: Glyph 39321 (\\N{CJK UNIFIED IDEOGRAPH-9999}) missing from font(s) DejaVu Sans.\n  plt.tight_layout()\nC:\\Users\\martinop\\AppData\\Local\\Temp\\ipykernel_360\\4252832057.py:29: UserWarning: Glyph 33777 (\\N{CJK UNIFIED IDEOGRAPH-83F1}) missing from font(s) DejaVu Sans.\n  plt.tight_layout()\nC:\\Users\\martinop\\AppData\\Local\\Temp\\ipykernel_360\\4252832057.py:29: UserWarning: Glyph 23588 (\\N{CJK UNIFIED IDEOGRAPH-5C24}) missing from font(s) DejaVu Sans.\n  plt.tight_layout()\nC:\\Users\\martinop\\AppData\\Local\\Temp\\ipykernel_360\\4252832057.py:29: UserWarning: Glyph 27663 (\\N{CJK UNIFIED IDEOGRAPH-6C0F}) missing from font(s) DejaVu Sans.\n  plt.tight_layout()\nC:\\Users\\martinop\\AppData\\Local\\Temp\\ipykernel_360\\4252832057.py:29: UserWarning: Glyph 34784 (\\N{CJK UNIFIED IDEOGRAPH-87E0}) missing from font(s) DejaVu Sans.\n  plt.tight_layout()\nC:\\Users\\martinop\\AppData\\Local\\Temp\\ipykernel_360\\4252832057.py:29: UserWarning: Glyph 36198 (\\N{CJK UNIFIED IDEOGRAPH-8D66}) missing from font(s) DejaVu Sans.\n  plt.tight_layout()\nC:\\Users\\martinop\\AppData\\Local\\Temp\\ipykernel_360\\4252832057.py:29: UserWarning: Glyph 33993 (\\N{CJK UNIFIED IDEOGRAPH-84C9}) missing from font(s) DejaVu Sans.\n  plt.tight_layout()\n\n\n\n\n\n\n\n\n\n\n\nA network graph of all the relations between 20 most mentioned characters\nUnder construction"
  },
  {
    "objectID": "index.html#inspirations-and-further-readings",
    "href": "index.html#inspirations-and-further-readings",
    "title": "Dream of the Red Chamber Data visualizations",
    "section": "Inspirations and further readings",
    "text": "Inspirations and further readings\nBrown, J. Text Analysis and Data Visualization Assignment: Little Women. JBrown’s Blog (2010) https://jbrownsblog.wordpress.com/2010/11/29/text-analysis-and-data-visualization-exercise/\nHeiss, A. PMAP 8921: Data Visualization (2020) https://datavizm20.classes.andrewheiss.com/example/13-example/, updated for 2025 https://datavizsp25.classes.andrewheiss.com/example/14-example.html\nWang, Z., Huang, D., Cui, J. et al. A review of Chinese sentiment analysis: subjects, methods, and trends. Artif Intell Rev 58, 75 (2025). https://doi.org/10.1007/s10462-024-10988-9"
  }
]