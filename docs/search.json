[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Dream of the Red Chamber Data visualizations",
    "section": "",
    "text": "It’s a data visualization of the three main protagonists of 红楼梦 (Dream of the Red Chamber), a classic of Chinese literature. It represents their mentions along the 120 chapters of the novel.\nThis page is the result of some experimentations I made to try Python in a Quarto environment with jupyter."
  },
  {
    "objectID": "index.html#introduction",
    "href": "index.html#introduction",
    "title": "Dream of the Red Chamber Data visualizations",
    "section": "",
    "text": "It’s a data visualization of the three main protagonists of 红楼梦 (Dream of the Red Chamber), a classic of Chinese literature. It represents their mentions along the 120 chapters of the novel.\nThis page is the result of some experimentations I made to try Python in a Quarto environment with jupyter."
  },
  {
    "objectID": "index.html#importing-data",
    "href": "index.html#importing-data",
    "title": "Dream of the Red Chamber Data visualizations",
    "section": "Importing data",
    "text": "Importing data\nImporting fulltext_simplified.txt, a text file retrieved from lilesIII. It is written with simplified chinese characters.\n\n\nCode\n# The echo: false option disables the printing of code (only output is displayed).\n\nwith open(\"data/fulltext_simplified.txt\", \"r\", encoding=\"utf-8\") as file:\n    main_text = file.read()\n\n\nPutting the content into a panda dataframe and shampooing the data :\n\n\n\nChapter_num\nChapter\nRawContent"
  },
  {
    "objectID": "index.html#how-many-times-the-3-main-protogonists-are-mentioned",
    "href": "index.html#how-many-times-the-3-main-protogonists-are-mentioned",
    "title": "Dream of the Red Chamber Data visualizations",
    "section": "How many times the 3 main protogonists are mentioned",
    "text": "How many times the 3 main protogonists are mentioned\n\nCounting\n\n\nCode\n# Count how many times the three main protagonists are counted in RawContent\n# Synonyms are enriched thanks to Wikidata (in labels).\n\n# List of Jia Baoyu's synonyms https://www.wikidata.org/wiki/Q8428650\njia_baoyu_synonyms = [\n    '贾宝玉', '賈寶玉', '寶玉', '寶二爺', '怡紅公子',\n    '絳洞花王', '富貴閒人', '宝玉', '宝二爷', \n    '絳洞花主', '绛洞花主', '怡红公子', '绛洞花王'\n]\n\n# Join them into a regex pattern\njia_baoyu_pattern = '|'.join(jia_baoyu_synonyms)\n\n# Use in your count\ndf_cn['count_JiaBaoyu'] = df_cn['RawContent'].str.count(jia_baoyu_pattern)\n\n\n\n\n# List of Lin Daiyu's synonyms\nlin_daiyu_synonyms = [\n    '林黛玉', '黛玉', '瀟湘妃子', '顰兒', '颦儿',\n    '林姑娘', '林妹妹', '潇湘妃子', \"玉儿\", \"颦颦\",\n]\n\n# Join them into a regex pattern\nlin_daiyu_pattern = '|'.join(lin_daiyu_synonyms)\n\n# Use in your count\ndf_cn['count_LinDaiyu'] = df_cn['RawContent'].str.count(lin_daiyu_pattern)\n\n\n\n\n# List of Xue Baochai's synonyms\nxue_baochai_synonyms = [\n    '薛寶釵', '薛宝钗', '寶釵', '宝钗',\n    '蘅蕪君', '蘅芜君', '寶姑娘', '宝姑娘',\n    '寶丫頭', '宝丫头', '寶姐姐', '宝姐姐'\n]\n\n# Join them into a regex pattern\nxue_baochai_pattern = '|'.join(xue_baochai_synonyms)\n\n# Use in your count\ndf_cn['count_XueBaochai'] = df_cn['RawContent'].str.count(xue_baochai_pattern)\n\n\n\n\nDrawing a heatmap\nPlotting a heatmap for all the chapters with a different color intensity depending on how many times one of the three main protagonists are mentioned.\n\n\nCode\n#Note that we included the cell option fold: true to hide the code by default (click the Code button to show it).\n\n# pip install scikit-learn jieba seaborn matplotlib\n\n# Draw a heat map for each entry and the values of the columns \n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Set Chapter_num as index for labeling rows in the heatmap\nheatmap_data = df_cn.set_index('Chapter_num')[['count_JiaBaoyu', 'count_LinDaiyu', 'count_XueBaochai']]\n\n\n# Create the heatmap\n\n# Plot the heatmap without labels or annotations\nplt.figure(figsize=(10, 6))\nsns.heatmap(\n    heatmap_data,\n    annot=False,          # No numbers inside cells\n    cmap='RdPu',          # palette of colors\n    linewidths=0.5,\n    cbar=True,\n    xticklabels=True,    #  column names\n    yticklabels=False     # No row labels\n)\n\n# Set y-ticks at intervals of 25\nnum_rows = heatmap_data.shape[0]\nticks = np.arange(0, num_rows, 25)\nplt.yticks(ticks + 0.5, ticks + 1)  # +0.5 centers ticks in cells, +1 shifts to 1-based indexing\n\nplt.title('«Dream of the Red Chamber» Three Main Protagonists \\n(Number of Mentions per Chapter)')\nplt.ylabel('Chapter Number')\nplt.xlabel('')  # Remove the x-axis label\nplt.tight_layout()\nplt.savefig('images/characters_count_hlm.png', dpi=300, bbox_inches='tight')\nplt.show()\n\n\n\n\n\n\n\n\nFigure 1: Three Main Protagonists\n\n\n\n\n\n\n\nDrawing a stacked bars graph\n\n\nCode\n# Set up data\nchapter_nums = df_cn['Chapter_num']\ncounts_baoyu = df_cn['count_JiaBaoyu']\ncounts_daiyu = df_cn['count_LinDaiyu']\ncounts_baochai = df_cn['count_XueBaochai']\n\n# Set figure size\nplt.figure(figsize=(12, 6))\n\n# Plot stacked bars\nplt.bar(chapter_nums, counts_baoyu, label='Jia Baoyu', color='mediumvioletred')\nplt.bar(chapter_nums, counts_daiyu, bottom=counts_baoyu, label='Lin Daiyu', color='orchid')\nplt.bar(\n    chapter_nums,\n    counts_baochai,\n    bottom=counts_baoyu + counts_daiyu,\n    label='Xue Baochai',\n    color='plum'\n)\n\n# Labels and legend\nplt.title('«Dream of the Red Chamber» Three Main Protagonists\\n(Number of Mentions per Chapter)')\nplt.xlabel('Chapter Number')\nplt.ylabel('Number of Mentions')\nplt.legend()\nplt.tight_layout()\n\n# Save and show\nplt.savefig('images/characters_count_stackedbars.png', dpi=300, bbox_inches='tight')\nplt.show()\n\n\n\n\n\n\n\n\nFigure 2: Three Main Protagonists\n\n\n\n\n\n\n\nAnother bar graph\nThis one is not stacked, so it’s more readable.\n\n\nCode\n# Set up data\nchapter_nums = df_cn['Chapter_num']\ncounts_baoyu = df_cn['count_JiaBaoyu']\ncounts_daiyu = df_cn['count_LinDaiyu']\ncounts_baochai = df_cn['count_XueBaochai']\n\n# Set figure and axes\nfig, axs = plt.subplots(3, 1, figsize=(12, 10), sharex=True)\n\n# Jia Baoyu\naxs[0].bar(chapter_nums, counts_baoyu, color='mediumvioletred')\naxs[0].set_title('Jia Baoyu – Number of Mentions per Chapter')\naxs[0].set_ylabel('Mentions')\n\n# Lin Daiyu\naxs[1].bar(chapter_nums, counts_daiyu, color='orchid')\naxs[1].set_title('Lin Daiyu – Number of Mentions per Chapter')\naxs[1].set_ylabel('Mentions')\n\n# Xue Baochai\naxs[2].bar(chapter_nums, counts_baochai, color='plum')\naxs[2].set_title('Xue Baochai – Number of Mentions per Chapter')\naxs[2].set_ylabel('Mentions')\naxs[2].set_xlabel('Chapter Number')\n\n# Tweak layout\nplt.suptitle('«Dream of the Red Chamber» – Character Mentions per Chapter', fontsize=16, y=1.02)\nplt.tight_layout()\nplt.savefig('images/characters_count_separate_bars.png', dpi=300, bbox_inches='tight')\nplt.show()\n\n\n\n\n\n\n\n\nFigure 3: Three Main Protagonists"
  },
  {
    "objectID": "index.html#how-many-times-pairs-of-protagonists-are-mentioned-together",
    "href": "index.html#how-many-times-pairs-of-protagonists-are-mentioned-together",
    "title": "Dream of the Red Chamber Data visualizations",
    "section": "How many times pairs of protagonists are mentioned together",
    "text": "How many times pairs of protagonists are mentioned together\n\nCounting\nThreshold (maximum distance between names mentioned) = 20 words.\n\n\nCode\n# Count how many times there is a jia_baoyu_synonyms AND a lin_daiyu_synonyms within 20/threshold characters.\n\nthreshold = 20\n\n# Compile regex patterns (non-capturing groups for clarity)\njia_baoyu_pattern = r'(?:' + '|'.join(jia_baoyu_synonyms) + r')'\nlin_daiyu_pattern = r'(?:' + '|'.join(lin_daiyu_synonyms) + r')'\n\n# Pattern: 贾宝玉 followed by ≤20/threshold chars then 林黛玉, OR 林黛玉 followed by ≤20/threshold chars then 贾宝玉\njia_lin_pattern = rf'{jia_baoyu_pattern}.{{0,{threshold}}}{lin_daiyu_pattern}|{lin_daiyu_pattern}.{{0,{threshold}}}{jia_baoyu_pattern}'\n\n# Function to count matches in a string\ndef count_jia_lin_pairs(text):\n    return len(re.findall(jia_lin_pattern, text))\n\n# Apply to the DataFrame\ndf_cn['JiaBaoyu_LinDaiyu'] = df_cn['RawContent'].apply(count_jia_lin_pairs)\n\n\n\n# count pairs of jia et xue\n\nxue_baochai_pattern = r'(?:' + '|'.join(xue_baochai_synonyms) + r')'\n\n# Pattern: 贾宝玉 followed by ≤20/threshold chars then 林黛玉, OR 林黛玉 followed by ≤20/threshold chars then 贾宝玉\njia_xue_pattern = rf'{jia_baoyu_pattern}.{{0,{threshold}}}{xue_baochai_pattern}|{xue_baochai_pattern}.{{0,{threshold}}}{jia_baoyu_pattern}'\n\n# Function to count matches in a string\ndef count_jia_xue_pairs(text):\n    return len(re.findall(jia_xue_pattern, text))\n\n# Apply to the DataFrame\ndf_cn['JiaBaoyu_XueBaochai'] = df_cn['RawContent'].apply(count_jia_xue_pairs)\n\n\n\n# count pairs of lin et xue\n\nlin_xue_pattern = rf'{lin_daiyu_pattern}.{{0,{threshold}}}{xue_baochai_pattern}|{xue_baochai_pattern}.{{0,{threshold}}}{lin_daiyu_pattern}'\n\n# Function to count matches in a string\ndef count_lin_xue_pairs(text):\n    return len(re.findall(lin_xue_pattern, text))\n\n# Apply to the DataFrame\ndf_cn['LinDaiyu_XueBaochai'] = df_cn['RawContent'].apply(count_lin_xue_pairs)\n\n\n\n\nDrawing\n\n\nCode\n# Set Chapter_num as index for labeling rows in the heatmap\nheatmap_data = df_cn.set_index('Chapter_num')[['JiaBaoyu_LinDaiyu', 'JiaBaoyu_XueBaochai','LinDaiyu_XueBaochai']]\n\n# # Create the heatmap\n\n# Plot the heatmap without labels or annotations\nplt.figure(figsize=(10, 6))\nsns.heatmap(\n    heatmap_data,\n    annot=False,          # No numbers inside cells\n    cmap='RdPu',\n    linewidths=0.5,\n    cbar=True,\n    xticklabels=True,    #  column names\n    yticklabels=False     # No row labels\n)\n\n# Set y-ticks at intervals of 25\nnum_rows = heatmap_data.shape[0]\nticks = np.arange(0, num_rows, 25)\nplt.yticks(ticks + 0.5, ticks + 1)  # +0.5 centers ticks in cells, +1 shifts to 1-based indexing\n\nplt.title('«Dream of the Red Chamber» Pairs of Protagonists \\n Mentioned Together (per Chapter)')\nplt.ylabel('Chapter Number')\nplt.xlabel('')  # Remove the x-axis label\nplt.tight_layout()\nplt.savefig('images/pairs_characters_hlm.png', dpi=300, bbox_inches='tight')\nplt.show()\n\n\n\n\n\n\n\n\nFigure 4: Pairs of Two Protagonists"
  },
  {
    "objectID": "index.html#changing-the-counting-method",
    "href": "index.html#changing-the-counting-method",
    "title": "Dream of the Red Chamber Data visualizations",
    "section": "Changing the counting method",
    "text": "Changing the counting method\nFrom now on, I will not use manual synonyms like before because it’s too heavy for managing a high number of characters.\nFrom lileslll, I found the file userdict.json : contains 165 characters of the novel and theirs nicknames… I rename it userdict_simplified.json."
  },
  {
    "objectID": "index.html#similarity-matrix",
    "href": "index.html#similarity-matrix",
    "title": "Dream of the Red Chamber Data visualizations",
    "section": "Similarity matrix",
    "text": "Similarity matrix\nI remove from the corpus all the words that are not in userdict_simplified.json. Like that, we can built a similarity matrix based on the characters in each chapters.\n\n\n\n\n\n\n\n\nFigure 5: Similarity matrix"
  },
  {
    "objectID": "index.html#who-are-the-most-mentioned-characters",
    "href": "index.html#who-are-the-most-mentioned-characters",
    "title": "Dream of the Red Chamber Data visualizations",
    "section": "Who are the most mentioned characters ?",
    "text": "Who are the most mentioned characters ?\nPut the userdic_simplified into a df with two columns : Name and NamePattern.\n\nStructure of the JSON (sample)\n{\n    \"贾宝玉\": [\n        \"贾宝玉\",\n        \"宝玉\",\n        \"宝二爷\",\n        \"怡红公子\",\n        \"绛洞花主\",\n        \"宝兄弟\"\n    ],\n    \"林黛玉\": [\n        \"林黛玉\",            \nThe first key will be Name and the second key will be NamePattern.\n\n\n\nName\nNamePattern\nCount\n\n\n\n\n贾宝玉\n贾宝玉\n\n\n\n贾宝玉\n宝玉\n\n\n\n贾宝玉\n宝二爷\n\n\n\n\n\n\nDrawing a bar graph\n\n\n\n\n\nMost mentioned characters"
  },
  {
    "objectID": "index.html#a-network-graph-of-all-the-relations-between-20-most-mentioned-characters",
    "href": "index.html#a-network-graph-of-all-the-relations-between-20-most-mentioned-characters",
    "title": "Dream of the Red Chamber Data visualizations",
    "section": "A network graph of all the relations between 20 most mentioned characters",
    "text": "A network graph of all the relations between 20 most mentioned characters\n\nCounting the positions\nExpanding userdict_simplified.json to add all the positions of each matches.\n\n\n\nName\nNamePattern\nChapter_num\nPosition in RawContent\n\n\n\n\n贾宝玉\n贾宝玉\n1\n3650\n\n\n贾宝玉\n宝玉\n6\n5896\n\n\n…\n…\n\n\n\n\n\n\nCounting each Name for control\nChecked ✅\n\n\n\nBuilding the matrix\nNow i want a matrix of Name that count characters presents in the same chapter.\nThe following code took 12 hours (!) to complete on my laptop. ⬇️\n\n\n\" UNCOMMENT TO REACTIVATE \\n\\nimport pandas as pd\\nimport numpy as np\\n\\n# Get unique NamePatterns\\nname_patterns = df_matches['NamePattern'].unique()\\n\\n# Initialize the matrix with zeros\\nmatrix = pd.DataFrame(0, index=name_patterns, columns=name_patterns)\\n\\n# Iterate through each pair of matches\\nfor i, row_i in df_matches.iterrows():\\n    for j, row_j in df_matches.iterrows():\\n        if i &gt;= j:\\n            continue  # Avoid duplicate and self comparisons\\n\\n        # Check if in same chapter\\n        if row_i['Chapter_num'] == row_j['Chapter_num']:\\n            # Check if within +/- 20 positions\\n            if abs(row_i['Position'] - row_j['Position']) &lt;= 20:\\n                matrix.loc[row_i['NamePattern'], row_j['NamePattern']] += 1\\n                matrix.loc[row_j['NamePattern'], row_i['NamePattern']] += 1  # symmetric\\n                \\n# Export for control\\nmatrix.to_csv('temp/matrix_proximity.csv', index=True)\\n\\n\"\n\n\nReading the csv previously generated into matrix (to avoid recalculating)\nFinalizing counting of proximity\nJust keep the highest 20\nDrawing a heatmap"
  },
  {
    "objectID": "index.html#inspirations-and-further-readings",
    "href": "index.html#inspirations-and-further-readings",
    "title": "Dream of the Red Chamber Data visualizations",
    "section": "Inspirations and further readings",
    "text": "Inspirations and further readings\nBrown, J. Text Analysis and Data Visualization Assignment: Little Women. JBrown’s Blog (2010) https://jbrownsblog.wordpress.com/2010/11/29/text-analysis-and-data-visualization-exercise/\nHeiss, A. PMAP 8921: Data Visualization (2020) https://datavizm20.classes.andrewheiss.com/example/13-example/, updated for 2025 https://datavizsp25.classes.andrewheiss.com/example/14-example.html\nWang, Z., Huang, D., Cui, J. et al. A review of Chinese sentiment analysis: subjects, methods, and trends. Artif Intell Rev 58, 75 (2025). https://doi.org/10.1007/s10462-024-10988-9"
  }
]